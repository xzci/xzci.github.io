I"\<h1 id="-e-706-design-hashmap">&lt;-E 706&gt; Design HashMap</h1>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">MyHashMap</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="cm">/** Initialize your data structure here. */</span>
    
    <span class="kt">int</span> <span class="n">hash</span><span class="p">(</span><span class="kt">int</span> <span class="n">key</span><span class="p">){</span>
        
        <span class="k">return</span> <span class="p">(</span><span class="n">key</span><span class="o">%</span><span class="mi">10000</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;&gt;&gt;</span><span class="n">map</span><span class="p">;</span>
    <span class="n">MyHashMap</span><span class="p">()</span> <span class="p">{</span>
        
        <span class="n">map</span><span class="p">.</span><span class="n">resize</span><span class="p">(</span><span class="mi">10000</span><span class="p">,{});</span>
        
    <span class="p">}</span>
    
    <span class="cm">/** value will always be non-negative. */</span>
    <span class="kt">void</span> <span class="n">put</span><span class="p">(</span><span class="kt">int</span> <span class="n">key</span><span class="p">,</span> <span class="kt">int</span> <span class="n">value</span><span class="p">)</span> <span class="p">{</span>
        
        <span class="kt">int</span> <span class="n">hash_val</span> <span class="o">=</span> <span class="n">hash</span><span class="p">(</span><span class="n">key</span><span class="p">);</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">map</span><span class="p">[</span><span class="n">hash_val</span><span class="p">].</span><span class="n">size</span><span class="p">()</span> <span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
            <span class="k">if</span><span class="p">(</span><span class="n">map</span><span class="p">[</span><span class="n">hash_val</span><span class="p">][</span><span class="n">i</span><span class="p">].</span><span class="n">first</span> <span class="o">==</span> <span class="n">key</span><span class="p">){</span>
                 <span class="n">map</span><span class="p">[</span><span class="n">hash_val</span><span class="p">][</span><span class="n">i</span><span class="p">].</span><span class="n">second</span> <span class="o">=</span> <span class="n">value</span><span class="p">;</span>
                <span class="c1">//cout&lt;&lt;"here";</span>
                <span class="k">return</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="n">map</span><span class="p">[</span><span class="n">hash_val</span><span class="p">].</span><span class="n">push_back</span><span class="p">({</span><span class="n">key</span><span class="p">,</span><span class="n">value</span><span class="p">});</span>
        
        <span class="k">return</span><span class="p">;</span>
        
    <span class="p">}</span>
    
    <span class="cm">/** Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key */</span>
    <span class="kt">int</span> <span class="n">get</span><span class="p">(</span><span class="kt">int</span> <span class="n">key</span><span class="p">)</span> <span class="p">{</span>
       <span class="kt">int</span> <span class="n">hash_val</span> <span class="o">=</span> <span class="n">hash</span><span class="p">(</span><span class="n">key</span><span class="p">);</span>
        <span class="k">for</span><span class="p">(</span><span class="k">auto</span> <span class="n">a</span> <span class="o">:</span> <span class="n">map</span><span class="p">[</span><span class="n">hash_val</span><span class="p">]){</span>
            <span class="k">if</span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">first</span> <span class="o">==</span> <span class="n">key</span><span class="p">){</span>
                <span class="k">return</span> <span class="n">a</span><span class="p">.</span><span class="n">second</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
        
        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="cm">/** Removes the mapping of the specified value key if this map contains a mapping for the key */</span>
    <span class="kt">void</span> <span class="n">remove</span><span class="p">(</span><span class="kt">int</span> <span class="n">key</span><span class="p">)</span> <span class="p">{</span>
        
        <span class="kt">int</span> <span class="n">hash_val</span> <span class="o">=</span> <span class="n">hash</span><span class="p">(</span><span class="n">key</span><span class="p">);</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">map</span><span class="p">[</span><span class="n">hash_val</span><span class="p">].</span><span class="n">size</span><span class="p">()</span> <span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
            
            <span class="k">if</span><span class="p">(</span><span class="n">map</span><span class="p">[</span><span class="n">hash_val</span><span class="p">][</span><span class="n">i</span><span class="p">].</span><span class="n">first</span> <span class="o">==</span> <span class="n">key</span><span class="p">){</span>
                <span class="n">map</span><span class="p">[</span><span class="n">hash_val</span><span class="p">].</span><span class="n">erase</span><span class="p">(</span><span class="n">map</span><span class="p">[</span><span class="n">hash_val</span><span class="p">].</span><span class="n">begin</span><span class="p">()</span><span class="o">+</span><span class="n">i</span><span class="p">);</span>
                <span class="k">return</span><span class="p">;</span>
            <span class="p">}</span>
            
        <span class="p">}</span>
        
        <span class="k">return</span><span class="p">;</span>
        
    <span class="p">}</span>
<span class="p">};</span>
<span class="cm">/**
 * Your MyHashMap object will be instantiated and called as such:
 * MyHashMap* obj = new MyHashMap();
 * obj-&gt;put(key,value);
 * int param_2 = obj-&gt;get(key);
 * obj-&gt;remove(key);
 */</span>
</code></pre></div></div>

:ET