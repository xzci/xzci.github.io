I"°<h1 id="-m-146-lru-cache">&lt;-M 146&gt; LRU Cache</h1>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">LRUCache</span> <span class="p">{</span>
<span class="nl">private:</span>
    <span class="k">struct</span> <span class="nc">CacheNode</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">key</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">value</span><span class="p">;</span>
        <span class="n">CacheNode</span><span class="p">(</span><span class="kt">int</span> <span class="n">k</span><span class="p">,</span> <span class="kt">int</span> <span class="n">v</span><span class="p">)</span> <span class="o">:</span> <span class="n">key</span><span class="p">(</span><span class="n">k</span><span class="p">),</span> <span class="n">value</span><span class="p">(</span><span class="n">v</span><span class="p">)</span> <span class="p">{}</span>
    <span class="p">};</span>
    <span class="n">list</span><span class="o">&lt;</span><span class="n">CacheNode</span><span class="o">&gt;</span> <span class="n">cacheList</span><span class="p">;</span>
    <span class="n">unordered_map</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="n">list</span><span class="o">&lt;</span><span class="n">CacheNode</span><span class="o">&gt;::</span><span class="n">iterator</span><span class="o">&gt;</span> <span class="n">cacheMap</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">capacity</span><span class="p">;</span>

<span class="nl">public:</span>
    <span class="n">LRUCache</span><span class="p">(</span><span class="kt">int</span> <span class="n">capacity</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="o">-&gt;</span><span class="n">capacity</span> <span class="o">=</span> <span class="n">capacity</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="kt">int</span> <span class="n">get</span><span class="p">(</span><span class="kt">int</span> <span class="n">key</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="n">cacheMap</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="n">key</span><span class="p">)</span> <span class="o">==</span> <span class="n">cacheMap</span><span class="p">.</span><span class="n">end</span><span class="p">())</span>
            <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
        <span class="n">cacheList</span><span class="p">.</span><span class="n">splice</span><span class="p">(</span><span class="n">cacheList</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">cacheList</span><span class="p">,</span> <span class="n">cacheMap</span><span class="p">[</span><span class="n">key</span><span class="p">]);</span>
        <span class="n">cacheMap</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="n">cacheList</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span>
        <span class="k">return</span> <span class="n">cacheMap</span><span class="p">[</span><span class="n">key</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">value</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="kt">void</span> <span class="n">put</span><span class="p">(</span><span class="kt">int</span> <span class="n">key</span><span class="p">,</span> <span class="kt">int</span> <span class="n">value</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="n">cacheMap</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="n">key</span><span class="p">)</span> <span class="o">==</span> <span class="n">cacheMap</span><span class="p">.</span><span class="n">end</span><span class="p">())</span> <span class="p">{</span>
            <span class="k">if</span><span class="p">(</span><span class="n">cacheList</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">==</span> <span class="n">capacity</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">cacheMap</span><span class="p">.</span><span class="n">erase</span><span class="p">(</span><span class="n">cacheList</span><span class="p">.</span><span class="n">back</span><span class="p">().</span><span class="n">key</span><span class="p">);</span>
                <span class="n">cacheList</span><span class="p">.</span><span class="n">pop_back</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="n">cacheList</span><span class="p">.</span><span class="n">push_front</span><span class="p">(</span><span class="n">CacheNode</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">));</span>
            <span class="n">cacheMap</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="n">cacheList</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span>
        <span class="p">}</span>
        <span class="k">else</span> <span class="p">{</span>
            <span class="n">cacheMap</span><span class="p">[</span><span class="n">key</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">value</span> <span class="o">=</span> <span class="n">value</span><span class="p">;</span>
            <span class="n">cacheList</span><span class="p">.</span><span class="n">splice</span><span class="p">(</span><span class="n">cacheList</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">cacheList</span><span class="p">,</span> <span class="n">cacheMap</span><span class="p">[</span><span class="n">key</span><span class="p">]);</span>
            <span class="n">cacheMap</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="n">cacheList</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">};</span>

<span class="cm">/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache* obj = new LRUCache(capacity);
 * int param_1 = obj-&gt;get(key);
 * obj-&gt;put(key,value);
 */</span>
</code></pre></div></div>
:ET