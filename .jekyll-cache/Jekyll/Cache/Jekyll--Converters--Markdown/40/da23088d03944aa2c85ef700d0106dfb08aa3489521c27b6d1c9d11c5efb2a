I"9 <p>学习 Go 的笔记</p>

<h1 id="变量">变量</h1>

<p>强类型和弱类型都可以支持</p>

<h2 id="赋值---强类型">赋值 - 强类型</h2>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">//var 变量名 变量类型 = 值</span>
<span class="k">var</span> <span class="n">i</span> <span class="kt">int</span> <span class="o">=</span> <span class="m">1</span>
</code></pre></div></div>

<h2 id="赋值---弱类型">赋值 - 弱类型</h2>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">//变量名 := 值</span>
<span class="n">i</span> <span class="o">:=</span> <span class="m">1</span>
</code></pre></div></div>

<p>根据值来判断类型，所以必须初始化</p>

<h1 id="变量类型">变量类型</h1>

<ul>
  <li>bool</li>
  <li>string</li>
  <li>int, int8, int16, int32, int64</li>
  <li>uint, uint8, uint16, uint32, uint64</li>
  <li>byte = unit8</li>
  <li>rune = int32(uncode code point)</li>
  <li>float32, float64</li>
  <li>complex32, complex64 (虚数)</li>
</ul>

<h1 id="格式控制">格式控制</h1>

<ul>
  <li>%T （要大写）</li>
</ul>

<h1 id="const">const</h1>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">// const 变量名 = 值</span>
<span class="k">const</span> <span class="n">i</span> <span class="o">=</span> <span class="m">1</span>

<span class="c">//这里没有:</span>
</code></pre></div></div>
<p>指明变量类型是可选的</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">const</span> <span class="n">变量名</span> <span class="n">变量类型</span> <span class="o">=</span> <span class="n">值</span>
</code></pre></div></div>

<p>const 可以 使用（） 形式，同时声明多个变量。</p>

<h1 id="for-和-while">for 和 while</h1>

<ul>
  <li>for</li>
</ul>

<p>普通 for</p>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">i</span> <span class="o">:=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="m">10</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span> <span class="p">{</span>
  <span class="c">// 这里不需要园括号</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>while</li>
</ul>

<p>Go 里的 while 是直接使用同一个关键词 for</p>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">i</span> <span class="o">:=</span> <span class="m">1</span>
<span class="k">for</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="m">100</span> <span class="p">{</span>
  <span class="c">//这里不需要使用分号</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>forever loop</li>
</ul>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="p">{</span>

<span class="p">}</span>
</code></pre></div></div>

<h1 id="if">if</h1>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="m">0</span> <span class="p">{</span>

<span class="p">}</span>

<span class="k">if</span> <span class="n">v</span><span class="o">:=</span><span class="n">math</span><span class="o">.</span><span class="n">pow</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">n</span><span class="p">);</span> <span class="n">v</span> <span class="o">&lt;</span> <span class="n">lim</span> <span class="p">{</span>
  <span class="c">//可以提前赋值</span>
<span class="p">}</span>

<span class="k">if</span> <span class="n">条件表达式</span> <span class="p">{</span>

<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>

<span class="p">}</span>
</code></pre></div></div>

<h1 id="switch">switch</h1>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">switch</span> <span class="n">赋值</span><span class="p">;</span> <span class="n">变量</span> <span class="p">{</span>
    <span class="k">case</span> <span class="n">label</span><span class="o">:</span>
    <span class="k">default</span><span class="o">:</span>
<span class="p">}</span>
<span class="c">// label 可以做运算， 比如： </span>
<span class="c">// case label + 0:</span>
</code></pre></div></div>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">switch</span> <span class="p">{</span>
  <span class="k">case</span> <span class="n">条件表达式</span><span class="err">：</span>
  <span class="k">case</span> <span class="n">条件表达式</span><span class="err">：</span>
<span class="p">}</span>

<span class="c">// 可以等价的看做一堆if else 的集合</span>
</code></pre></div></div>

<h1 id="defer">defer</h1>

<h1 id="struct">struct</h1>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">type</span> <span class="n">Vertex</span> <span class="k">struct</span> <span class="p">{</span>
	<span class="n">X</span> <span class="kt">int</span>
	<span class="n">Y</span> <span class="kt">int</span>
	<span class="n">Z</span> <span class="kt">float32</span>
<span class="p">}</span>
</code></pre></div></div>

<p>和C差不多。 取消了 -&gt; 访问都是.</p>

<p>以后都是用Vertex 作为变量的名称
如果都没有初始化，那么会提供默认初始化为0。 但是有了一个初始化后，使用 变量初始化 没事。</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">type</span> <span class="n">Vertex</span> <span class="k">struct</span> <span class="p">{</span>
	<span class="n">X</span><span class="p">,</span> <span class="n">Y</span> <span class="kt">int</span>
<span class="p">}</span>
<span class="n">v2</span> <span class="o">=</span> <span class="n">Vertex</span><span class="p">{</span><span class="n">X</span><span class="o">:</span> <span class="m">189</span><span class="p">}</span>  <span class="c">// Y:0 is implicit, 结果是 189， 0</span>
</code></pre></div></div>

<p>如果不使用变量如：</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Vertex</span><span class="p">{</span><span class="m">1</span><span class="p">}</span>
<span class="c">// 会报错</span>
</code></pre></div></div>

<h1 id="arrays">Arrays</h1>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="n">变量名</span><span class="p">[</span><span class="n">数组大小</span><span class="p">]</span> <span class="n">变量类型</span>

<span class="k">var</span> <span class="n">a</span> <span class="p">[</span><span class="m">10</span><span class="p">]</span><span class="kt">int</span>
<span class="c">// 显示声明</span>

<span class="n">变量名</span><span class="o">:=</span> <span class="p">[</span><span class="n">数组大小</span><span class="p">]</span> <span class="n">变量类型</span> <span class="p">{</span><span class="n">值</span><span class="p">}</span> <span class="c">// 值为空或者少于大小都可</span>
<span class="n">primes</span> <span class="o">:=</span> <span class="p">[</span><span class="m">6</span><span class="p">]</span><span class="kt">int</span><span class="p">{</span><span class="m">2</span><span class="p">,</span> <span class="m">3</span><span class="p">,</span> <span class="m">5</span><span class="p">,</span> <span class="m">7</span><span class="p">,</span> <span class="m">11</span><span class="p">,</span> <span class="m">13</span><span class="p">}</span>
</code></pre></div></div>

<h1 id="slices">Slices</h1>

<p>切片 同python</p>
:ET