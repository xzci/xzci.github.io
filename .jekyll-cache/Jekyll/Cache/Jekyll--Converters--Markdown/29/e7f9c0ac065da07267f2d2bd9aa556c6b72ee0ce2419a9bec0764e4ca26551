I"><p>通过反复的练习，达到自己手写的程度（白板写代码），基本上为了理解好的代码，进行的代码摘抄。</p>
<h1 id="基本数据结构">基本数据结构</h1>
<p>通过反复的练习，达到自己手写的程度（白板写代码） 每个数据结构的实现必须熟悉（最为基本的实现）虽然C++或者其他语言都有这相应的的基本实现，可以直接调用使用，（调用库函数）但是还是应该能够直接手写出代码。以其获得更为具体的优化。（能所不能） 相应的，要理解每个数据结构的优缺点。</p>
<h2 id="展开">展开</h2>
<p>以后自己的代码也需要这样的设计。建立一个良好的接口，增加程序代码的复用。 比如在上记得代码中，对链表这个数据结构进行了抽象，相同的结构如：</p>
<ul> <li>插入</li> <li>删除</li> <li>头节点</li> <li>尾结点</li> <li>链表长度</li> <li>链表初始化</li> <li>链表销毁</li> </ul>
<p>这些地方这3种数据结构操作相似。可以进行抽象，在其他提供类的语言中，这些可以通过类进行继承，以期实现代码的复用。</p>
<p>对于工作之中，使代码多结构化可以减少需求变更的情况下，尽可能的减少修改代码的行数。 比如，链表实现的代码中，需要添加一个功能，那么可以只需要在list中实现这个功能，其他数据结构就可以通过相应的参数，return给相关的函数。 另外比如需要修改插入函数，那么仅仅只需要在list函数中就行修改就可以保证，剩下的数据结构同时被修改。</p>
<p>这里的数据结构可以替换成其他工作中需要实现的功能等。结果同样。</p>
<h2 id="c语言编程细节">C语言编程细节</h2>
<p>注意因为C语言没有bool类型。所以在返回值的时候，会出现 <strong>-1， 0， 1</strong>等多种情况。因为在C中True 是任意的非0数字，只有0是false, 所以在写自己的函数的时候，要注意自己的函数应该返回状态码（比如一些函数错误结束后的返回-1），还是用于if判断的（0，1）</p>
<h2 id="链表系">链表系</h2>
<h3 id="单链表">单链表</h3>
<p>最为简单的数据结构，每个节点为一个自己定义的结构（包含数据，指针 <strong>指向下一个节点</strong>） 因为只保存了下一个节点的地址，所以单链表是不可以倒序遍历的，也不能随机访问。必须由头节点逐个依次的访问。 如果每个下一个节点有重复则称之为<strong>循环链表</strong> &lt;-判断是否成环也是相应的算法题之一，并且我觉得也是一些有用的算法题，需要特别记忆的。 特别的：</p>
<ul> <li>每个节点的位置是离散的（后一个节点的内存位置并不是在节点内存的下一个） 这种分散的特性，相比数组的连续内存有些时候会更加高效。</li> <li>如果发生删除操作一定要先获取以后节点的地址</li> </ul>
<p>如果插入、删除的__位置为NULL__，则默认插入、删除的位置在表头。</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//节点定义</span> <span class="k">typedef</span> <span class="k">struct</span> <span class="n">ListElmt_</span>...
</code></pre></div></div>
:ET