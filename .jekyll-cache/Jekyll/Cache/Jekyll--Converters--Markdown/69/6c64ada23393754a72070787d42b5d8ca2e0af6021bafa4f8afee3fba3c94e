I"R<h1 id="-e-21-merge-two-sorted-lists">&lt;-E 21&gt; Merge Two Sorted Lists</h1>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */</span>

<span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="n">ListNode</span><span class="o">*</span> <span class="n">mergeTwoLists</span><span class="p">(</span><span class="n">ListNode</span><span class="o">*</span> <span class="n">l1</span><span class="p">,</span> <span class="n">ListNode</span><span class="o">*</span> <span class="n">l2</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="n">l1</span><span class="o">==</span><span class="nb">NULL</span> <span class="o">||</span> <span class="n">l2</span><span class="o">==</span><span class="nb">NULL</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">l1</span><span class="o">&gt;</span><span class="n">l2</span> <span class="o">?</span> <span class="n">l1</span> <span class="o">:</span> <span class="n">l2</span><span class="p">;</span>
        
        <span class="n">ListNode</span><span class="o">*</span> <span class="n">head</span><span class="o">=</span><span class="p">(</span><span class="n">l1</span><span class="o">-&gt;</span><span class="n">val</span><span class="o">&lt;</span><span class="n">l2</span><span class="o">-&gt;</span><span class="n">val</span><span class="p">)</span> <span class="o">?</span> <span class="n">l1</span> <span class="o">:</span> <span class="n">l2</span><span class="p">;</span>
        <span class="n">head</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">=</span><span class="n">mergeTwoLists</span><span class="p">(</span><span class="n">head</span><span class="o">==</span><span class="n">l1</span> <span class="o">?</span> <span class="n">l1</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">:</span> <span class="n">l1</span><span class="p">,</span> <span class="n">head</span><span class="o">==</span><span class="n">l2</span> <span class="o">?</span> <span class="n">l2</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">:</span><span class="n">l2</span><span class="p">);</span>
        <span class="k">return</span> <span class="n">head</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>

<span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="n">ListNode</span><span class="o">*</span> <span class="n">mergeTwoLists</span><span class="p">(</span><span class="n">ListNode</span><span class="o">*</span> <span class="n">l1</span><span class="p">,</span> <span class="n">ListNode</span><span class="o">*</span> <span class="n">l2</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="n">l1</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">l2</span><span class="p">;</span>
        <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">l2</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">l1</span><span class="p">;</span>
        
        <span class="n">ListNode</span><span class="o">*</span> <span class="n">h</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
        
        <span class="k">if</span><span class="p">(</span><span class="n">l1</span><span class="o">-&gt;</span><span class="n">val</span> <span class="o">&lt;=</span> <span class="n">l2</span><span class="o">-&gt;</span><span class="n">val</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">h</span> <span class="o">=</span> <span class="n">l1</span><span class="p">;</span>
            <span class="n">h</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">mergeTwoLists</span><span class="p">(</span><span class="n">l1</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">,</span><span class="n">l2</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">else</span> <span class="p">{</span>
            <span class="n">h</span> <span class="o">=</span> <span class="n">l2</span><span class="p">;</span>
            <span class="n">h</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">mergeTwoLists</span><span class="p">(</span><span class="n">l1</span><span class="p">,</span><span class="n">l2</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">h</span><span class="p">;</span> 
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>

:ET