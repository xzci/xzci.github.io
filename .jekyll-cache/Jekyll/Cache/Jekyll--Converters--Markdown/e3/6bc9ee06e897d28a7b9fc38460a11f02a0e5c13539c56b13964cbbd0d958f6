I"û<h1 id="-e-206-reverse-linked-list">&lt;-E 206&gt; Reverse Linked List</h1>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */</span>
<span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="n">ListNode</span><span class="o">*</span> <span class="n">reverseList</span><span class="p">(</span><span class="n">ListNode</span><span class="o">*</span> <span class="n">head</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">ListNode</span> <span class="o">*</span><span class="n">curr</span><span class="o">=</span> <span class="n">head</span><span class="p">;</span>
        <span class="n">ListNode</span> <span class="o">*</span><span class="n">next</span><span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
        <span class="n">ListNode</span> <span class="o">*</span><span class="n">prev</span><span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>

        <span class="k">while</span><span class="p">(</span><span class="n">curr</span> <span class="o">!=</span><span class="nb">NULL</span><span class="p">){</span>
            <span class="n">next</span><span class="o">=</span><span class="n">curr</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
            <span class="n">curr</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">=</span><span class="n">prev</span><span class="p">;</span>
            <span class="n">prev</span><span class="o">=</span><span class="n">curr</span><span class="p">;</span>
            <span class="n">curr</span><span class="o">=</span><span class="n">next</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="n">head</span><span class="o">=</span><span class="n">prev</span><span class="p">;</span>
        <span class="k">return</span> <span class="n">head</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>

<span class="c1">// method 2</span>
<span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="n">ListNode</span><span class="o">*</span> <span class="n">reverseList</span><span class="p">(</span><span class="n">ListNode</span><span class="o">*</span> <span class="n">head</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">ListNode</span> <span class="o">*</span><span class="n">prev</span><span class="p">{};</span>
            <span class="k">while</span><span class="p">(</span><span class="n">head</span><span class="p">)</span>
                <span class="n">head</span><span class="o">=</span><span class="n">exchange</span><span class="p">(</span><span class="n">head</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">,</span><span class="n">exchange</span><span class="p">(</span><span class="n">prev</span><span class="p">,</span><span class="n">head</span><span class="p">));</span>
            <span class="k">return</span> <span class="n">prev</span><span class="p">;</span>
        <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>

:ET