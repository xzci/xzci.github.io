I"X<h1 id="-m-150-evaluate-reverse-polish-notation">&lt;-M 150&gt; Evaluate Reverse Polish Notation</h1>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="kt">int</span> <span class="n">evalRPN</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;&amp;</span> <span class="n">tokens</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">tokens</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="n">first</span><span class="p">,</span> <span class="n">sec</span><span class="p">,</span> <span class="n">third</span><span class="p">;</span>
        <span class="n">stack</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">stk</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span><span class="p">(</span><span class="n">tokens</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="s">"+"</span> <span class="o">||</span> <span class="n">tokens</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="s">"-"</span> <span class="o">||</span> <span class="n">tokens</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="s">"*"</span> <span class="o">||</span> <span class="n">tokens</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="s">"/"</span> <span class="p">)</span> <span class="p">{</span>
                <span class="n">sec</span> <span class="o">=</span> <span class="n">stk</span><span class="p">.</span><span class="n">top</span><span class="p">();</span>
                <span class="n">stk</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
                <span class="n">first</span> <span class="o">=</span> <span class="n">stk</span><span class="p">.</span><span class="n">top</span><span class="p">();</span>
                <span class="n">stk</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
                <span class="k">switch</span><span class="p">(</span><span class="n">tokens</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">])</span> <span class="p">{</span>
                    <span class="k">case</span> <span class="sc">'+'</span><span class="p">:</span>
                        <span class="n">third</span> <span class="o">=</span> <span class="n">first</span> <span class="o">+</span> <span class="n">sec</span><span class="p">;</span>
                        <span class="k">break</span><span class="p">;</span>
                    <span class="k">case</span> <span class="sc">'-'</span><span class="p">:</span>
                        <span class="n">third</span> <span class="o">=</span> <span class="n">first</span> <span class="o">-</span> <span class="n">sec</span><span class="p">;</span>
                        <span class="k">break</span><span class="p">;</span>
                    <span class="k">case</span> <span class="sc">'*'</span><span class="p">:</span>
                        <span class="n">third</span> <span class="o">=</span> <span class="n">first</span> <span class="o">*</span> <span class="n">sec</span><span class="p">;</span>
                        <span class="k">break</span><span class="p">;</span>
                    <span class="k">case</span> <span class="sc">'/'</span><span class="p">:</span>
                        <span class="n">third</span> <span class="o">=</span> <span class="n">first</span> <span class="o">/</span> <span class="n">sec</span><span class="p">;</span>
                        <span class="k">break</span><span class="p">;</span>

                <span class="p">}</span>
                <span class="n">stk</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">third</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="k">else</span><span class="p">{</span>
                <span class="n">stk</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">stoi</span><span class="p">(</span><span class="n">tokens</span><span class="p">[</span><span class="n">i</span><span class="p">]));</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">stk</span><span class="p">.</span><span class="n">top</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>
:ET